<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
     
    <aop:aspectj-autoproxy/>
    	<bean id="loggerAspect" class="com.highluck.common.LoggerAspect" />
    	<bean id="bindingAspect" class="com.highluck.common.BindingAspect" />
    
    
   <aop:config proxy-target-class="true">
		<aop:pointcut id="txAdvisePointCut" expression="execution(public * com.highluck.biz..*.*(..))"/>
		<aop:advisor id="transactionAdvisor" pointcut-ref="txAdvisePointCut" advice-ref="txAdvice"/>
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	<tx:attributes>
		<tx:method name="get*" read-only="true" />
		<tx:method name="find*" read-only="true" />
		<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
		<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
		<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
	</tx:attributes>
	</tx:advice>

	
	<!-- 
execution(public * *(..))	public 메소드 실행
execution(* set*(..))	이름이 set으로 시작하는 모든 메소드명 실행
execution(* set*(..))	이름이 set으로 시작하는 모든 메소드명 실행
execution(* com.xyz.service.AccountService.*(..))	AccountService 인터페이스의 모든 메소드 실행
execution(* com.xyz.service.*.*(..))	service 패키지의 모든 메소드 실행
execution(* com.xyz.service..*.*(..))	service 패키지와 하위 패키지의 모든 메소드 실행
within(com.xyz.service.*)	service 패키지 내의 모든 결합점
within(com.xyz.service..*)	service 패키지 및 하위 패키지의 모든 결합점
this(com.xyz.service.AccountService)	AccountService 인터페이스를 구현하는 프록시 개체의 모든 결합점
target(com.xyz.service.AccountService)	AccountService 인터페이스를 구현하는 대상 객체의 모든 결합점
args(java.io.Serializable)	하나의 파라미터를 갖고 전달된 인자가 Serializable인 모든 결합점
@target(org.springframework.transaction.annotation.Transactional)	대상 객체가 @Transactional 어노테이션을 갖는 모든 결합점
@within(org.springframework.transaction.annotation.Transactional)	대상 객체의 선언 타입이 @Transactional 어노테이션을 갖는 모든 결합점
@annotation(org.springframework.transaction.annotation.Transactional)	실행 메소드가 @Transactional 어노테이션을 갖는 모든 결합점
@args(com.xyz.security.Classified)	단일 파라미터를 받고, 전달된 인자 타입이 @Classified 어노테이션을 갖는 모든 결합점
bean(accountRepository)	“accountRepository” 빈
!bean(accountRepository)	“accountRepository” 빈을 제외한 모든 빈
bean(*)	모든 빈
bean(account*)	이름이 'account'로 시작되는 모든 빈
bean(*Repository)	이름이 “Repository”로 끝나는 모든 빈
bean(accounting/*)	이름이 “accounting/“로 시작하는 모든 빈
bean(*dataSource) || bean(*DataSource)	이름이 “dataSource” 나 “DataSource” 으로 끝나는 모든 빈
	
	
	
<tx:mehod> 태그의 속성
name : 트랜잭션이 적용될 메서드 이름 '*' 사용 설정이 가능
propagation : 트랜잭션의 전파 규칙
isolation : 트랜잭션의 격리 레벨
read-only : 읽기 전용 여부
no-rollback-for : 트랜잭션을 롤백하지 않을 예외 타입
rollback-for : 트랜잭션을 롤백할 예외 타입
timeout : 트랜잭션의 타임 아웃 시간을 초 단위로 설정
	
	
	REQUIRED : 메서드를 수행하는데 트랜잭션이 필요하다는 것을 의미. 
현재 진행중인 트랜잭션이 존재하면, 해당 트랜잭션을 사용하고 존재하지 
않는다면 새로운 트랜잭션을 생성
MANDATORY : 메서드를 수행하는데 트랜잭션이 필요하다는 것을 의미. REQUIRED와 달리,
진행중인 트랜잭션이 존재하지 않을 경우 예외를 발생
REQUIRES_NEW : 항상 새로운 트랜잭션을 시작. 기존 트랜잭션이 존재하면 
기존 트랜잭션을 일시 중지하고 새로운 트랜잭션을 시작. 새로 시작된 트랜잭션이 
종료된 뒤에 기존 트랜잭션이 계속됨
SUPPROTS : 메서드가 트랜잭션을 필요로 하지는 않지만, 기존 트랜잭션이 존재할 경우 
트랜잭션을 사용한다는 것을 의미. 진행 중인 트랜잭션이 존재하지 않더라도 메서드는 
정상적으로 동작
NOT_SUPPORTED : 메서드가 트랜잭션을 필요로 하지 않음을 의미. SUPPORTS와 
달리 진행중인 트랜잭션이 존재할 경우 메서드가 실행되는 동안 트랜잭션을 일시 
중지되며, 메서드 실행이 종료된 후에 트랜잭션을 계속 진행
NEVER : 메서드가 트랜잭션을 필요로 하지 않으며, 만약 진행중인 트랜잭션이 존재하면 
예외발생
	 -->
    
    
</beans>